cmake_minimum_required(VERSION 3.18)

# 1.编译类型
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# 2. C++ 标准库
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 3. 第三方库
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake;${CMAKE_MODULE_PATH}")

# 4.工程名称
project(simple LANGUAGES CXX)

# 5.主模块 main
add_subdirectory(demo)


# 常用目录
message(STATUS "1.CMAKE_SOURCE_DIR : ${CMAKE_SOURCE_DIR}")
message(STATUS "2.CMAKE_BINARY_DIR : ${CMAKE_BINARY_DIR}")
message(STATUS "3.CMAKE_CURRENT_SOURCE_DIR : ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "4.CMAKE_CURRENT_BINARY_DIR : ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "5.CMAKE_CURRENT_LIST_DIR : ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "6.CMAKE_MODULE_PATH : ${CMAKE_MODULE_PATH}")


# 工程名称
message(STATUS "1.CMAKE_PROJECT_NAME : ${CMAKE_PROJECT_NAME}")
# 编译器
message(STATUS "2.CMAKE_GENERATOR : ${CMAKE_GENERATOR}")
# 架构判断, x86 or x64
message(STATUS "3.CMAKE_SIZEOF_VOID_P : ${CMAKE_SIZEOF_VOID_P}")
# CMake 版本
message(STATUS "4.CMAKE_VERSION : ${CMAKE_VERSION}")
# 检查是否 WINDOWS 平台
message(STATUS "5.CMAKE_HOST_WIN32 : ${CMAKE_HOST_WIN32}")
# 检查是否是 MacOS 平台
message(STATUS "6.CMAKE_HOST_APPLE : ${CMAKE_HOST_APPLE}")
# 检查是否是 Linux 平台
message(STATUS "7.CMAKE_HOST_UNIX : ${CMAKE_HOST_UNIX}")